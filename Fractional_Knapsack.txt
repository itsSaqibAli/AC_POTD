class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        double bucket = 0;
        map<double, int, greater <double>> mp;
        for(int i=0; i<n; i++)
            mp[arr[i].value/(double)arr[i].weight] += arr[i].weight;
            
        //previous logic fails when there are multiple equal value/weights ratio
        // aand it will assign the last ratio value to it
        
        // for(auto &x : mp)
        //     cout<<x.first<<" : "<<x.second<<endl;
            
        for(auto &x : mp) {
            if(W > x.second) {
                bucket += (x.first * x.second);
                W -= x.second;
            }
            else {
                 bucket += (W * x.first);
                 break;
            }
        }
            
        return bucket;
    }
        
};
